//첫번째 시도
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;


public class Main {

    public static class ArrayStack {
        int top;
        int size;
        int[] stack;

        public ArrayStack(int size) {
            this.size = size;
            stack = new int[size];
            this.top = -1; // 초기화 시 top을 -1로 설정하여 비어있음을 나타냄
        }

        public boolean isEmpty() {
            return top == -1; // top이 -1이면 스택이 비어있음을 나타냄
        }

        public boolean isFull() {
            return top == size - 1; // top이 size - 1이면 스택이 꽉 차있음을 나타냄
        }

        public void push(int val) {
            if (isFull()) {
                System.out.println("Stack is full. Cannot push " + val);
            } else {
                top++;
                stack[top] = val; // 값 넣기
            }
        }

        public int pop() {
            if (isEmpty()) {
                return -1; // 스택이 비어있을 경우 -1 반환
            } else {
                int val = stack[top];
                top--; // top을 하나 줄여서 요소를 제거한 것처럼 보이도록 함
                return val; // pop한 값을 반환
            }
        }

        public int size() {
            return top + 1; // top 값은 실제 요소의 위치가 아니라 인덱스이므로 +1을 해서 요소 개수를 반환
        }

        public int peek() {
            if (isEmpty()) {
                return -1; // 스택이 비어있을 경우 -1 반환
            } else {
                return stack[top]; // top에 있는 값을 반환
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int size = Integer.parseInt(br.readLine()); // 명령어의 개수
        StringTokenizer st;

        ArrayStack arrStack = new ArrayStack(size); // 스택 생성

        for (int i = 0; i < size; i++) {
            st = new StringTokenizer(br.readLine()); // 각 줄의 명령어와 값을 읽어옴
            int num = Integer.parseInt(st.nextToken());
            switch (num) {
                case 1:
                    int val = Integer.parseInt(st.nextToken()); // 스택에 넣을 값
                    arrStack.push(val);
                    break;
                case 2:
                    System.out.println(arrStack.pop());
                    break;
                case 3:
                    System.out.println(arrStack.size());
                    break;
                case 4:
                    System.out.println(arrStack.isEmpty() ? 1 : 0);
                    break;
                case 5:
                    System.out.println(arrStack.peek());
                    break;
                default:
                    System.out.println("Invalid command");
                    break;
            }
        }
    }
}
//시간 초과가 나온다 배열을 사용한것이 문제인가? 다른 방법으로 스택을 구현해야겟다

